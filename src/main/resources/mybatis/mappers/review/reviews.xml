<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yogiyo.review.dao.ReviewDao">

	<!-- 사용자가 리뷰등록  -->
	<insert id="createMyReview" parameterType="com.yogiyo.review.vo.Review">
		insert into yogiyo_review
		(review_no, review_contents, taste_score, quantity_score, delivery_score, avg_score, 
		review_photo1, review_photo2, review_photo3, store_no, user_no)
		values
		(yogiyo_review_seq.nextval, #{contents}, #{tasteScore}, #{quantityScore}, 
		#{deliveryScore}, #{avgScore}, #{photo1}, #{photo2}, #{photo3}, #{storeNo}, #{userNo})
	</insert>
	
	<!-- 오너가 리뷰코멘트등록  -->
	<update id="createComment" parameterType="com.yogiyo.review.vo.Review">
		update yogiyo_review
		set
			owner_no = #{ownerNo},
			owner_comment = #{ownerComment},
			owner_review_created_date = sysdate
		where
			review_no = #{no}
	</update>
	
	<!-- 총 리뷰개수 반환 -->
	<select id="getReviewCnt" parameterType="map" resultType="int">
		select
			count(*)
		from
			yogiyo_review
		where
			store_no = #{storeNo}
		<choose>
			<when test="picture == 'YES'">
				and
					photo1 is not null
			</when>
			<when test="picture == 'NO'">
				and
					photo1 is null
			</when>
		</choose>
	</select>
	
	<!-- 리뷰 보여주기 -->
	<select id="getReviews" parameterType="map" resultType="com.yogiyo.review.vo.Review">
		select
			rn, no, contents, reviewCreatedDate, tasteScore,
			quantityScore, deliveryScore, avgScore, photo1, photo2, photo3, 
			ownerNo, ownerComment, ownerReviewCreatedDate, storeNo,
			userNo
	 	from
	 		(select 
	 			row_number() over (order by review_created_date desc) as rn,
				review_no as no,
				review_contents as contents,
				review_created_date as reviewCreatedDate,
				taste_score as tasteScore,
				quantity_score as quantityScore,
				delivery_score as deliveryScore,
				avg_score as avgScore, 
				review_photo1 as photo1,
				review_photo2 as photo2,
				review_photo3 as photo3,
				owner_no as ownerNo,
				owner_comment as ownerComment,
				owner_review_created_date as ownerReviewCreatedDate,
				store_no as storeNo,
				user_no as userNo
	 		 from	
	 		 	yogiyo_review
	 		 where
	 		 	store_no = #{storeNo})
	 	where
	 		rn >= #{begin}
	 	and	
	 		rn &lt;= #{end}
	</select>
	
	<!-- 총 코멘트개수 반환 -->
	<select id="getCommentCnt" parameterType="map" resultType="int">
		select
			count(*)
		from
			yogiyo_review
		<where>
			<if test="ownerComment != null">
				store_no = #{storeNo}
			</if>
		</where>
	</select>
	
	<!-- storeNo로 리뷰 조회하기 -->
	<select id="getReviewByStoreNo" parameterType="String" resultType="com.yogiyo.review.vo.Review">
		select
			review_no as no, 
			review_contents as contents, 
			review_created_date as reviewCreatedDate, 
			taste_score as tasteScore, 
			quantity_score as quantityScore, 
			delivery_score as deliveryScore, 
			avg_score as avgScore, 
			review_photo1 as photo1, 
			review_photo2 as photo2, 
			review_photo3 as photo3, 
			owner_no as ownerNo, 
			owner_comment as ownerComment, 
			owner_review_created_date as ownerReviewCreatedDate, 
			store_no as storeNo, 
			user_no as userNo
	 	from	
	 		 yogiyo_review
	 	where
	 		 store_no = #{value}
	</select>
	
	<!-- reviewNo로 리뷰 조회하기 -->
	<select id="getReviewByReviewNo" parameterType="int" resultType="com.yogiyo.review.vo.Review">
		select
			review_no as no, 
			review_contents as contents, 
			review_created_date as reviewCreatedDate, 
			taste_score as tasteScore, 
			quantity_score as quantityScore, 
			delivery_score as deliveryScore, 
			avg_score as avgScore, 
			review_photo1 as photo1, 
			review_photo2 as photo2, 
			review_photo3 as photo3, 
			owner_no as ownerNo, 
			owner_comment as ownerComment, 
			owner_review_created_date as ownerReviewCreatedDate, 
			store_no as storeNo, 
			user_no as userNo
	 	from	
	 		 yogiyo_review
	 	where
	 		 review_no = #{value}
	</select>
	
	<!-- 총 리뷰개수 반환 -->
	<select id="getReviewCount" resultType="int">
		select
			count(*)
		from
			yogiyo_review
		where
			store_no = #{storeNo}
	</select>
	
	<!-- 모든 리뷰 반환 -->
	<select id="getAllReviews" resultType="com.yogiyo.review.vo.Review">
		select
			review_no as no, 
			review_contents as contents, 
			review_created_date as reviewCreatedDate, 
			taste_score as tasteScore, 
			quantity_score as quantityScore, 
			delivery_score as deliveryScore, 
			avg_score as avgScore, 
			review_photo1 as photo1, 
			review_photo2 as photo2, 
			review_photo3 as photo3, 
			owner_no as ownerNo, 
			owner_comment as ownerComment, 
			owner_review_created_date as ownerReviewCreatedDate, 
			store_no as storeNo, 
			user_no as userNo
	 	from	
	 		 yogiyo_review
	</select>
	
	<!-- 내가 쓴 리뷰 삭제하기 -->
	<delete id="deleteMyReview" parameterType="com.yogiyo.review.vo.Review">
		delete 
		from	yogiyo_review
		where
			review_no = #{reviewNo}
		and
			user_no = #{userNo}
	</delete>
</mapper>












